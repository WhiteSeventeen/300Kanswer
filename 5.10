#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>

class MovingAverage {  //实时平均线类
public:
    MovingAverage(unsigned long time_window) : time_window_(time_window) {}

    void add_price_data(const std::pair<unsigned long, double>& price_data) {
        price_data_.push_back(price_data);
        updata_moving_average_();
        calculate_moving_average();
        if (moving_average_ != last_moving_average_) {
            last_moving_average_ = moving_average_;
            on_moving_average_changed(moving_average_);   //判断平均值发生变化
        }
    }

    void updata_moving_average_()  //更新数据
    {
        unsigned long current_time = price_data_.back().first;

        while ((current_time - price_data_.front().first) > time_window_)
        {
            double old_price = price_data_.front().second;
            if (last_moving_average_ > old_price)
            {
                moving_average_ = last_moving_average_ - (last_moving_average_ - old_price) / price_data_.size();
            }
            else
                moving_average_ = last_moving_average_ + (old_price - last_moving_average_) / price_data_.size();
            price_data_.erase(price_data_.begin());
        }
        
        
    }

    //获取当前平均值
    double get_moving_average() const {
        return moving_average_;
    }

    //设置回调函数，触发条件是平均值发生变化
    void set_moving_average_changed_callback(std::function<void(double)> callback) {
        moving_average_changed_callback_ = callback;
    }

private:
 
/*      void remove_old_data() {
        unsigned long current_time = price_data_.back().first; //或者可以   unsigned long current_time = time(NULL); 当前系统时间
        price_data_.erase(std::remove_if(price_data_.begin(), price_data_.end(),
            [&](const std::pair<unsigned long, double>& data) {
                return current_time - data.first > time_window_;
            }),
            price_data_.end());
    }
*/

    void calculate_moving_average() {
        double new_price = price_data_.back().second;
        if (last_moving_average_ > new_price)
        {
            moving_average_ = last_moving_average_ - (last_moving_average_ - new_price) / price_data_.size()  ;
        }
        else
            moving_average_ = last_moving_average_ + (new_price - last_moving_average_) / price_data_.size();
    }

    //平均值变化，调用回调函数moving_average_changed_callback_
    void on_moving_average_changed(double new_moving_average) {
        if (moving_average_changed_callback_) {
            moving_average_changed_callback_(new_moving_average);  
        }
    }

    unsigned long time_window_;
    std::vector<std::pair<unsigned long, double>> price_data_{};
    double moving_average_ = 0;
    double last_moving_average_ = 0;
    std::function<void(double)> moving_average_changed_callback_;
};

int main() {
    int time_window = 60000;
    MovingAverage price(time_window); //设置一分钟时间窗口

    price.set_moving_average_changed_callback([](double new_moving_average) {
        std::cout << "Moving average changed: " << new_moving_average << std::endl;
        });

    price.add_price_data({ 1682982215035, 100.12 });
    price.add_price_data({ 1682982216528, 100.42 });
    price.add_price_data({ 1682982221121, 99.53 });
    // 调用添加数据方法

    //设置触发条件,每过一个窗口时间，就更新一次数据
    if (clock() % time_window == 0)
    {
        price.updata_moving_average_();
    }

    return 0;
}

//这个类有一个方法add_price_data来添加新的价格数据，并计算指定时间窗口内的移动平均值。
//它还提供了一个方法set_moven_average_changed_callback，用于设置移动平均线变化时将调用的回调函数。

